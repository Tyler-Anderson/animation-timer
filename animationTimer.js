// Generated by CoffeeScript 1.10.0

/*
   Tyler Anderson
   Tyler@Brava.do
 */

(function() {
  var AnimationTimer, stopwatch;

  stopwatch = function() {
    this.startTime = 0;
    this.running = false;
    return {
      start: function() {
        this.startTime = +new Date();
        this.running = true;
        return true;
      },
      stop: function() {
        this.elapsed = +new Date() - this.startTime;
        this.running = false;
        return true;
      },
      getElapsed: function() {
        if (this.running) {
          return (+new Date()) - this.startTime;
        } else {
          return this.elapsed;
        }
      },
      isRunning: function() {
        return this.running;
      },
      reset: function() {
        this.elapsed = 0;
        return true;
      }
    };
  };

  AnimationTimer = (function() {
    function AnimationTimer(duration, timeWarp) {
      if (duration == null) {
        duration = 1000;
      }
      if (!(this instanceof AnimationTimer)) {
        return new AnimationTimer(duration, timeWarp);
      } else {
        this.duration = duration;
        if (typeof timeWarp === "string") {
          this.timeWarp = this[timeWarp];
        } else {
          this.timeWarp = this.makeLinear;
        }
        this.stopwatch = new stopwatch();
        return this;
      }
    }

    AnimationTimer.prototype.changeDuration = function(duration1) {
      this.duration = duration1;
    };

    AnimationTimer.prototype.start = function() {
      this.stopwatch.start();
      return true;
    };

    AnimationTimer.prototype.stop = function() {
      this.stopwatch.stop();
      return true;
    };

    AnimationTimer.prototype.getRealElapsedTime = function() {
      return this.stopwatch.getElapsed();
    };

    AnimationTimer.prototype.getElapsedTime = function() {
      var elapsedTime, percentComplete;
      elapsedTime = this.stopwatch.getElapsed();
      percentComplete = elapsedTime / this.duration;
      if (!this.stopwatch.running) {
        return void 0;
      }
      if (!this.timeWarp) {
        return elapsedTime;
      }
      return elapsedTime * (this.timeWarp(percentComplete) / percentComplete);
    };

    AnimationTimer.prototype.isRunning = function() {
      return this.stopwatch.running(!this.isOver() ? false : void 0);
    };

    AnimationTimer.prototype.isOver = function() {
      return this.stopwatch.getElapsedTime() > this.duration;
    };

    AnimationTimer.prototype.reset = function() {
      this.stopwatch.reset();
      return true;
    };

    AnimationTimer.prototype.makeEaseOut = function(strength) {
      return function(percentComplete) {
        return 1 - Math.pow(1 - percentComplete, strength * 2);
      };
    };

    AnimationTimer.prototype.makeEaseIn = function(strength) {
      return function(percentComplete) {
        return Math.pow(percentComplete, strength * 2);
      };
    };

    AnimationTimer.prototype.makeEaseInOut = function() {
      return function(percentComplete) {
        return percentComplete - Math.sin(percentComplete * 2 * Math.PI) / (2 * Math.PI);
      };
    };

    AnimationTimer.prototype.makeElastic = function(passes) {
      passes = passes != null ? passes : 3;
      return function(percentComplete) {
        return ((1 - Math.cos(percentComplete * Math.PI * passes)) * (1 - percentComplete)) + percentComplete;
      };
    };

    AnimationTimer.prototype.makeBounce = function(bounces) {
      var fn;
      fn = AnimationTimer.makeElastic(bounces);
      return function(percentComplete) {
        percentComplete = fn(percentComplete);
        if (percentComplete <= 1) {
          return percentComplete;
        } else {
          return 2 - percentComplete;
        }
      };
    };

    AnimationTimer.prototype.makeLinear = function() {
      return function(percentComplete) {
        return percentComplete;
      };
    };

    return AnimationTimer;

  })();

  module.exports = AnimationTimer;

}).call(this);
